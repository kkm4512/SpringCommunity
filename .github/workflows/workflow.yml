#name: 'WORKFLOW' #Github Actions 워크플로우의 이름 지정
#
#on: # 워크 필로우가 언제 실행될지 정의
#  pull_request: # 내가 지정한 브랜치가 pr됐을때 실행
#    branches: [ main ] # main, feature/* 패턴에 해당하는 모든 브랜치
#
#jobs: # 여러개의 작업을 정의
#  cicd: # 한 작업(job)의 이름
#    runs-on: [ ubuntu-latest ] # 이 작업이 실행될 환경 지정, ubuntu 최신환경으로 하겠습니다
#    steps: # ci라는 작업에 대한 실행될 행동들 정의
#      - name: checkout # 이 단계의 이름
#        # Gtihub Actions에서 제공하는 actions/checkout 플러그인을 사용하여, 레퍼지토리의 코드를 체크아웃합니다
#        # @v4는 버젼입니다
#        # 즉 githubd에 있는 나의 프로젝트 코드들을, github Actions 가상머신에 복사하는 과정!
#        uses: actions/checkout@v4
#
#      - name: java_setup # 이 단계의 이름
#        # java 환경을 설정하는 Github Actions 플러그인 사용
#        # 즉 Github Actions의 가상머신에 있는 현재 나의 프로젝트 코드들을 실행시키기위해 java 17버젼을 준비한다는 뜻!
#        uses: actions/setup-java@v2
#        with: # 플러그인 설정
#          distribution: 'adopt' # AdoptOpenJDK 배포판 사용
#          java-version: '17' # 17 버젼
#      # application.properties 파일 생성
#      - name: Make local application.yml
#        # resources 디렉토리로 위치를 옮긴다
#        # 깃헙 sercrets 설정으로 저장되있는 나의 yml 파일들을 새로만든다
#        run: |
#          cd ./src/main/resources
#          echo "${{ secrets.DATABASE_PROPERTIES }}" > ./application.yml
#        shell: bash
#      # github VM에서 CI에서 성공되기 위한 mysql 설정
#      - name: mysql start
#        uses: mirromutth/mysql-action@v1.1
#        with:
#          mysql database: springcommunity
#          mysql root password: ${{secrets.MYSQL_PASSWORD}}
#
#      # 빌드 돌리며, jar 파일 만들고 테스트 코드 돌림
#      - name: Build with Gradle (Only Test)
#        run: | # 커스텀 스크립트를 실행하는 명령어, 여러줄로 구성된 명령을 |를 사용하여 작성 가능
#          chmod +x ./gradlew
#          ./gradlew test
#      - name: Make AWS application.yml
#        run: |
#          cd ./src/main/resources
#          echo "${{ secrets.AWS_DATABASE_PROPERTIES }}" > ./application.yml
#        shell: bash
#      # AWS 빌드 돌림
#      - name: AWS Build with Gradle
#        run: | # 커스텀 스크립트를 실행하는 명령어, 여러줄로 구성된 명령을 |를 사용하여 작성 가능
#          chmod +x ./gradlew
#          ./gradlew clean
#          ./gradlew build -x test
#        # 이미지 빋르후 도커허브에 넣기
#      - name: web docker build and push
#        # 로그인하고
#        # 현재 jar 파일을 기준으로 도커 이미지 만들고
#        # 도커 허브에 올린다
#        run: |
#          docker login -u ${{secrets.DOCKER_HUB_ID}} -p ${{secrets.DOCKER_HUB_TOKEN}}
#          docker build -t ${{secrets.DOCKER_HUB_ID}}/${{secrets.DOCKER_HUB_REPO}} .
#          docker push ${{secrets.DOCKER_HUB_ID}}/${{secrets.DOCKER_HUB_REPO}}
#      # github actions 가상머신에 있는 docker-compose.yml 파일을 내가 지정한 ec2로 옮김
#      - name: Copy githubVM to ec2
#        uses: appleboy/scp-action@v0.1.4
#        with:
#          host: ${{secrets.AWS_HOST}}
#          key: ${{secrets.AWS_KEY}}
#          username: ubuntu
#          source: ./docker-compose.yml
#          target: ~/docker-compose.yml
#      - name: executing remote ssh
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{secrets.AWS_HOST}}
#          key: ${{secrets.AWS_KEY}}
#          username: ubuntu
#          script: |
#            sudo systemctl restart docker
#            docker login -u ${{secrets.DOCKER_HUB_ID}} -p ${{secrets.DOCKER_HUB_TOKEN}}
#            sudo docker pull ${{secrets.DOCKER_HUB_ID}}/${{secrets.DOCKER_HUB_REPO}}
#            cd ~/docker-compose.yml
#            sudo docker-compose down
#            sudo docker-compose up -d
#            sudo docker image prune -f
#
#
#
#
